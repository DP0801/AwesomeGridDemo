@model DinnerInput
@using AwesomeMvcDemo.Models
@using AwesomeMvcDemo.ViewModels.Input
@{
    ViewBag.Title = "Grid inline batch editing";
}

<h1>Batch save inline editing grid</h1>

<div class="example">
    <h2>Edit on row click and batch save</h2>
    @*begin2*@
    @{
        var grid2Id = "DinnersGrid2";
        var initObj = new
        {
            Name = DemoUtils.RndName(),
            Date = DateTime.Now.ToShortDateString(),
            ChefId = Db.Chefs.First().Id,
            MealsIds = Db.Meals.Take(2).Select(o => o.Id).ToArray()
        };
    }
    <div class="bar">
        <div style="float: right;">
            @Html.Awe().TextBox("txtSearch2").Placeholder("search...").CssClass("searchtxt")
        </div>
        <button type="button" onclick="$('#@grid2Id').data('api').inlineCreate()" class="awe-btn">Create</button>
        @Html.InlineCreateButtonForGrid(grid2Id, initObj, "Create with predefined values")
        <button type="button" onclick="$('#@grid2Id').data('api').batchSave()" class="awe-btn">Save All</button>
        <button type="button" onclick="$('#@grid2Id').data('api').inlineCancelAll()" class="awe-btn">Cancel All</button>
    </div>

    @Html.InitDeletePopupForGrid(grid2Id, "GridInlineEditDemo")

    @(Html.Awe().Grid(grid2Id)
      .Mod(o => o.Main(false).BatchEdit(Url.Action("BatchSave"))) //, rowClickEdit:false
      .Url(Url.Action("GridGetData"))
      .Parent("txtSearch2", "search")
      .Height(350)
      .Resizable()
      .Reorderable()
      .Attr("data-syncg", "dinner")
      .Columns(
          new Column { Bind = "Id", Width = 75 }
          .Mod(o => o.InlineId()),

          new Column { Bind = "Name" }
            .Mod(o => o.Inline(Html.Awe().TextBox("Name"))),

          new Column { Bind = "Date", Width = 160 }
            .Mod(o => o.Inline(Html.Awe().DatePicker("Date").ReadonlyInput().ChangeYear().ChangeMonth())),

          new Column { Bind = "Chef.FirstName,Chef.LastName", ClientFormat = ".(ChefName)", Header = "Chef", MinWidth = 170 }
            .Mod(o => o.Inline(Html.Awe().Odropdown("Chef").Url(Url.Action("GetChefs", "Data")), "ChefId")),

          new Column { ClientFormat = ".(Meals)", Header = "Meals", MinWidth = 250 }
            .Mod(o => o.Inline(
                Html.Awe().AjaxCheckboxList("Meals")
                    .Multiselect()
                    .Url(Url.Action("GetMealsImg", "Data")), "MealsIds")),

          new Column { Bind = "BonusMeal.Name", ClientFormat = ".(BonusMeal)", Header = "Bonus Meal" }
            .Mod(o => o.Inline(
                    Html.Awe().AjaxRadioList("BonusMealId")
                        .Odropdown()
                        .Url(Url.Action("GetMealsImg", "Data")), "BonusMealId")),

          new Column { Bind = "Organic", Width = 90, ClientFormat = ".(DispOrganic)" }
            .Mod(o => o.Inline(Html.Awe().CheckBox("Organic").Otoggl())),

          new Column { ClientFormat = GridUtils.InlineEditFormat(), Width = 80 },
          new Column { ClientFormat = Html.InlineDeleteFormatForGrid(grid2Id), Width = 85 }))
    @*grid client validation (for MVC5 must be placed in a cshtml with @model DinnerInput)*@
    @(Html.BindOVld<DinnerInput>("#" + grid2Id))
    @*end2*@
    <br />
    <div class="tabs">
        <div data-caption="description" class="expl">
            Grid inline editing with batch save.
            Edit on row click, and save by clicking the save all button on top. <br />
            Save can be performed either for each row individually by clicking the row save button, for all at once using the "Save all" button. <br />
            You can turn off edit on row click by setting <code>rowClickEdit: false</code> (like in the inline editing demos).
        </div>
        <div data-caption="view">@Html.Source("GridInlineBatchEditing/Index.cshtml", "2")</div>
        <div data-caption="controller">@Html.Code("Demos/Grid/GridInlineBatchEditingController.cs")</div>
    </div>
</div>