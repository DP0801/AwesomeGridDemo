@{
    ViewBag.Title = "Grid Filter Row Filtering Large Data Source";
}

<h1>Grid Filter Row Large Data Source</h1>
<div class="example">
    @*beginld*@
    @(Html.Awe().Grid("GridFrowLargeData")
        .Height(390)
        .Reorderable()
        .Resizable()
        .Url(Url.Action("LunchFilterGridLarge", "GridFilterRowServerSideData"))
        .Mod(o => o.Main().FilterRow())
        .Columns(
            new Column {Bind = "Id", Width = 100}.Mod(o => o.Filter("search:")),

            new Column {Bind = "Person"}
                .Mod(o => o.Filter(Html.Awe().TextBox("Person").Placeholder("Person").ClearButton())),

            new Column {Bind = "Food", ClientFormatFunc = "site.imgFood", MinWidth = 200 }
                .Mod(o => o.Filter(
                    Html.Awe().Odropdown("Food",
                        d => d.SearchFunc("utils.osearch", Url.Action("SearchFood"), "food1")
                            .ItemFunc("site.imgFoodItem")
                            .CaptionFunc("site.imgFoodCaption")
                            .ClearBtn())
                        .CssClass("o-nfload") // editor with this class won't be reloaded on grid load
                        .Url(Url.Action("GetFoodsInit")))),

            new Column {Bind = "Country.Name", Prop = "CountryName", Header = "Country"}
                .Mod(o => o.Filter(Html.Awe().Odropdown("Country",
                        d => d.SearchFunc("utils.osearch", Url.Action("SearchCountry")).ClearBtn())
                        .CssClass("o-nfload")
                        .Url(Url.Action("GetCountryInit")))),

            new Column {Prop = "MealsStr", MinWidth = 200, Header = "Meals", Grow = 1.7}
                .Mod(o => o.Filter(Html.Awe().AjaxCheckboxList("Meals")
                        .DataFunc("utils.frowData('Meals')")
                        .Multiselect(d => d.SearchFunc("utils.osearch", Url.Action("SearchMeals")).ClearBtn())
                        .ParameterFunc("utils.getFparams") // send filters values
                        )),

            new Column {Bind = "Chef.FirstName,Chef.LastName", Prop = "ChefName", Header = "Chef"}
                .Mod(o => o.Filter(Html.Awe().Odropdown("Chef", d => d.SearchFunc("utils.osearch", Url.Action("SearchChef")).ClearBtn())
                    .DataFunc("utils.frowData('Chef')")
                    .ParameterFunc("utils.getFparams")))
            ))
    @*endld*@
    <br />
    <div class="tabs">
        <div data-caption="description" class="expl">
            When we have a large data source and the amount of possible items in a filter dropdown is too big, using the methods shown above could bring performance issues. <br />
            For example if "Food" dropdown could have 1 million items it would be impractical to simply load them all.<br />
            One very easy solution would be to simply use a textbox instead, like we've done for the <b>Person</b> column.<br /><br />
            Another option is to use a dropdown with remote search, as done for the <b>Country</b> column,
            initially only a few items are loaded, and additional items are loaded when we make a search (<code>SearchFunc</code> is used for this).
            We've set <code>o-nfload</code> on the country dropdown so it won't load each time the grid loads,
            this is only necessary for editors that get their data from the grid model (Tag.frow set in the grid action).<br /><br />

            <b>Food</b> dropdown is similar to "Country", only the data for "Food" we have to get from Db.Lunches -> Food:string property,
            and call Distinct(), while for Country it was easier because we got it from Db.Countries.<br /><br />

            <b>Chef</b> and <b>Meals</b> also use <code>SearchFunc</code> like "Country" except filter parameters (order, selected values)
            are also sent to the searchFunc so the resulting items are filtered based on the previous selected filters.<br />
            So if you select a certain "Food" and a certain "Country" and after search in the "Meals" editor, the result will contain only meals that have rows with the selected "Food" and "Country"
            (Meals also gets filtered by itself). <br />
            On the initial load only the items for the selected value(s) are received from the Grid Model (frow).
        </div>
        <div data-caption="view">
            @Html.Source("GridFilterRowServerSideData/LargeDataSource.cshtml", "ld")
        </div>
        <div data-caption="controller">
            @Html.Csource("Demos/Grid/GridFilterRowServerSideDataController.cs", "lrgd")
        </div>
    </div>
</div>